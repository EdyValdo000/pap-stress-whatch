// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace StressWatchML
{
    public partial class MLStress
    {
        /// <summary>
        /// model input class for MLStress.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"BPM")]
            public float BPM { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"SpO2")]
            public float SpO2 { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"GSR")]
            public float GSR { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"Temp")]
            public float Temp { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"Nível de Estresse")]
            public float Nível_de_Estresse { get; set; }
        }

        #endregion

        /// <summary>
        /// model output class for MLStress.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"BPM")]
            public float BPM { get; set; }

            [ColumnName(@"SpO2")]
            public float SpO2 { get; set; }

            [ColumnName(@"GSR")]
            public float GSR { get; set; }

            [ColumnName(@"Temp")]
            public float Temp { get; set; }

            [ColumnName(@"Nível de Estresse")]
            public float Nível_de_Estresse { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine().Result, true);

        private static async Task<PredictionEngine<ModelInput, ModelOutput>> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            using var stream = await FileSystem.OpenAppPackageFileAsync("MLStress.mlnet");
            ITransformer mlModel = mlContext.Model.Load(stream, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
